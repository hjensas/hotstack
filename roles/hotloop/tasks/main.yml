---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Assert config is defined
  ansible.builtin.assert:
    that:
      - automation is defined
      - automation.stages is defined
      - automation.stages | length > 0
      - work_dir is defined
      - work_dir | length > 0
      - manifests_dir is defined
      - manifests_dir | length > 0

- name: Load stages
  hotloop_stage_loader:
    stages: "{{ automation.stages }}"
  register: __loaded_stages

- name: Ensure directory exists
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ manifests_dir }}"

- name: Create temporary hotloop work directory
  ansible.builtin.tempfile:
    state: directory
    suffix: hotloop_work_temp
  register: _work_temp

- name: Sync work files to work directory
  vars:
    _source_path: "{{ [work_dir, ''] | ansible.builtin.path_join }}"
    _target_path: >-
      {{
        [_work_temp.path, ''] | ansible.builtin.path_join
      }}
    _is_local: >-
      {{
        hostvars[inventory_hostname]['ansible_connection'] |
        default('') == 'local'
      }}
    _dest_user: "{{ hostvars['controller-0']['ansible_user'] | default('zuul') }}"
    _dest_host: "{{ hostvars['controller-0']['ansible_host'] | default('controller-0') }}"
    _dest_target_path: "{{ _dest_user }}@{{ _dest_host }}:{{ _target_path }}"
  block:
    - name: Remove target directory for clean sync (local connection)
      when: _is_local
      ansible.builtin.file:
        path: "{{ _target_path }}"
        state: absent

    - name: Copy work files (local connection)
      when: _is_local
      ansible.builtin.copy:
        src: "{{ _source_path }}"
        dest: "{{ _target_path }}"
        mode: preserve

    - name: Sync work files (remote connection) - using synchronize push
      when: not _is_local
      delegate_to: "{{ inventory_hostname }}"
      ansible.posix.synchronize:
        src: "{{ _source_path }}"
        dest: "{{ _dest_target_path }}"
        mode: push
        archive: true
        delete: true
        rsync_timeout: 300

- name: Execute automation stages
  vars:
    _work_dir: "{{ _work_temp.path }}"
  ansible.builtin.include_tasks:
    file: execute_stage.yml
  loop: "{{ __loaded_stages.outputs.stages }}"

- name: Remove temporary hotloop work directory
  ansible.builtin.file:
    path: "{{ _work_temp.path }}"
    state: absent
